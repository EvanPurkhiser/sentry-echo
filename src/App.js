import React, { Component } from 'react';
import Tone from 'tone';
import classNames from 'classnames';
import lodash from 'lodash';
import geolib from 'geolib';
import './index.scss';

const platforms = [
  'javascript',
  'node',
  'python',
  'ruby',
  'cocoa',
  'csharp',
  'elixir',
  'go',
  'java',
  'objc',
  'php',
  'perl',
  'c',
  'other',
];

let userLocation = null;

navigator.geolocation.getCurrentPosition(p => {
  const { latitude, longitude  } = p.coords;
  userLocation = { latitude, longitude };

  console.log('Got users location');
});

const emptyDataSet = {}
for (const key of platforms) {
  emptyDataSet[key] = { count: 0, lastLoc: undefined };
}

let data = lodash.cloneDeep(emptyDataSet);

const eventSource = new EventSource("https://live.sentry.io:7000")
eventSource.onmessage = e => {
  const [ latitude, longitude, , platform ] = JSON.parse(e.data)

  if (!platforms.includes(platform)) {
    console.log('Missing platform: ', platform)
    return;
  }

  data[platform].count++;
  data[platform].lastLoc = { latitude, longitude };
}

const pluckConfig = {
  attackNoise: 1,
  dampening:   4000,
  resonance:   0.9,
}


//const panner = new Tone.Panner();
//const synth = new Tone.PluckSynth(pluckConfig).connect(panner);
//
//panner.toMaster();
//
//const timeScale = 0.25;
//const playlistTime = timeScale * platforms.length;
//
// let sec = playlistTime + 1;
// 
// console.log(sec)
// 
// setInterval(x => {
//   const dataSample = data;
//   data = lodash.cloneDeep(emptyDataSet);
// 
//   for (const key of platforms) {
//     const sample = dataSample[key];
// 
//     if (userLocation !== null) {
//       const bearing = geolib.getBearing(userLocation, sample.lastLoc)
//       const panning = Math.sin(bearing) * 1;
// 
//       panner.pan.setValueAtTime(panning, sec)
// 
//     }
// 
// 
//     console.log(dataSample)
// 
// 
//     synth.triggerAttackRelease(dataSample[key].count, '4n', sec)
//     sec += timeScale;
//   }
// 
// 
// }, playlistTime * 1000)


const instrumentGroups = [
  'Lead Synth',
  'Kick Drum',
  'Bass Line',
];

const defaultGrouping = [
  [ 'javascript', 'node', 'python', 'ruby' ],
  [ 'csharp', 'elixir', 'go', 'php' ],
  [ 'java', 'objc', 'c', 'other' ],
];

class PlatformSequence extends Component {
  constructor() {
    super();

    this.state = {
      sequenceSize:  new Tone.Time('8:0:0'),
      playheadShown: false,
      playing:       false,
    };

    console.log(this.state.sequenceSize.toSeconds())

    this.movePlayhead = this.movePlayhead.bind(this);
  }

  componentDidMount() {
    const startPlaying = time => {
      console.log('Okay now playing!')
      this.setState({ playheadShown: true, playing: true });
    };

    Tone.Transport.schedule(
      t => Tone.Draw.schedule(_ => startPlaying(t), t),
      this.state.sequenceSize,
    )
  }

  render() {
    return <li className="platform">
      <span className={classNames('platform-icon', this.props.platform)} />
      <span className="note-indicator" />
      <div className="sequence-timeline">
        <span
          className={classNames('playhead', { shown: this.state.playheadShown })}
          ref={e => this.playhead = e} />
      </div>
    </li>;
  }
}

const heading = <header>
  <div className="logo">
    <h1>Sentry</h1>
    <h1>Echo</h1>
  </div>
  <p>
    Listen the beautiful soundscape generated by software breaking around the
    world. Hear the sound of errors â€” Powered by sentry.io
  </p>
</header>;

class App extends Component {
  constructor() {
    super()

    const ordering = lodash.cloneDeep(defaultGrouping);
    this.state = { ordering };
  }

  render() {
    const sequencerList = this.state.ordering.map((items, i) => {
      const heading = <li key={i} className="instrument-heading">
        {instrumentGroups[i]}
      </li>;

      const sequencers = items.map(p => <PlatformSequence key={p} platform={p} />);

      return [ heading, sequencers ];
    })

    return <div id="sentry_echo">
      {heading}
      <div className="main-app">
        <span className="waiting-sequence">
          Waiting for first sequence of events...
        </span>

        <ul className="sequencers">
          {sequencerList}
        </ul>
      </div>
    </div>;
  }
}

export default App;
